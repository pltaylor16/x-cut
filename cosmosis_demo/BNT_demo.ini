
[runtime]
; The test sampler just runs a single parameter set
sampler = test
root = ${COSMOSIS_SRC_DIR}

[test]
; These are the parameters for this sampler.
; In this case there is just one parameter
save_dir=cosmosis_demo_output

; If something goes wrong this will aid diagnosis
fatal_errors=T

; The pipeline section contains information
; that describes the sequence of calculations
; to be done and what we want out at the end
[pipeline]
; The list of modules to be run, in this order.
; The modules named here must appear as sections below
modules = consistency camb halofit extrapolate_power nonlinear_linear_alignment ia_z_powerlaw load_nz photoz_bias no_bias projection add_intrinsic shear_m_bias 2pt BNT 
; The file to get cosmological and nuisance parameters
; from.
values = values1.ini
; Not used here, becuase we are not sampling
likelihoods = 
extra_output = 
quiet=F
debug=T
timing=F

[BNT]
file = /Users/petaylor/test/BNT/pub_code/BNT_cosmosis.py
BNT_path = BNT_matrix_DESY1.txt 
run_mode = configuration

[ia_z_powerlaw]
file = cosmosis-standard-library/intrinsic_alignments/z_powerlaw/ia_z_powerlaw.py


[nonlinear_linear_alignment]
file = cosmosis-standard-library/intrinsic_alignments/la_model/linear_alignments_interface.py
method = bk_corrected

[add_intrinsic]
file = cosmosis-standard-library/shear/add_intrinsic/add_intrinsic.py
position-shear = F


[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py
	
[photoz_bias]
file = cosmosis-standard-library/number_density/photoz_bias/photoz_bias.py
mode=additive
sample=nz_sample
bias_section = wl_photoz_errors

[camb]
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=all
lmax=2500
feedback=0
kmin = 1e-5
kmax = 10.
nk = 200

[halofit]
file = cosmosis-standard-library/boltzmann/halofit_takahashi/halofit_interface.so
nk = 700

; new simple module for using sigma8 as an input instead of A_s
; ; the only parameter required is the file location
[sigma8_rescale]
file = cosmosis-standard-library/utility/sample_sigma8/sigma8_rescale.py


[extrapolate_power]
file=cosmosis-standard-library/boltzmann/extrapolate/extrapolate_power.py
kmax=500.0

[dndz]
file = cosmosis-standard-library/number_density/gaussian_window/gaussian_window.py
z= 1.0
sigma = 0.1

; This is an example of a very simple module - it simple loads in 
; a file once at the start when setting up and supplies fixed data
; when executed.
[add_intrinsic]
file = cosmosis-standard-library/shear/add_intrinsic/add_intrinsic.py

[load_nz]
file = cosmosis-standard-library/number_density/load_nz/load_nz.py
filepath = nz.dat
data_sets=SAMPLE
output_section = nz_sample

#[nonlinear_linear_alignment]
#file = cosmosis-standard-library/add_intrinsicinsic_alignments/la_model/linear_alignments_interface.py
#method = bk_corrected

[no_bias]
file = cosmosis-standard-library/bias/no_bias/no_bias.py


[shear_m_bias]
file = cosmosis-standard-library/shear/shear_bias/shear_m_bias.py
m_per_bin = True


[projection]
file = cosmosis-standard-library/structure/projection/project_2d.py
ell_min = 0.1
ell_max = 5e5
n_ell = 400
shear-shear = sample-sample
position-position = sample-sample
position-shear = sample-sample
shear-intrinsic = sample-sample
intrinsic-intrinsic = sample-sample
verbose = T



[2pt]
file = cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so
input_section_name = shear_cl
ouput_section_name = shear_xi
corr_type = 0
